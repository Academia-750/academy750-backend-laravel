<?php

namespace {{ namespace }};

use App\Http\Resources\Api\Users\UsersResource;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class {{ class }} implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;
    private $errors;
    private $userNotifyImportProcess;
    private $failed;

    public function __construct($errors, $userAuthNotifyProcess, $failed)
    {
        $this->errors = $errors;
        $this->userNotifyImportProcess = $userAuthNotifyProcess;
        $this->failed = $failed;
    }

    public function broadcastOn(): array
    {
        return [
            new PrivateChannel('resource.{{ resourceName }}'),
            new PrivateChannel("App.Models.{{ resourceNamePascalCase }}.Import.{$this->userNotifyImportProcess->getRouteKey()}"),
        ];
    }

    public function broadcastAs(): string
    {
        return 'resource.{{ resourceName }}.import.event';
    }

    public function broadcastWith(): array
    {
        return [
            'data' => [
                'errors' => $this->errors,
                'userNotifyImportProcess' => UsersResource::make(
                    $this->userNotifyImportProcess
                ),
                'failedApp' => $this->failed
            ]
        ];
    }

    public function broadcastWhen(): bool
    {
        return true;
    }
}
