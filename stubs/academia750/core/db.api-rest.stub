<?php
namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedInterface }};
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Facades\Excel;
use App\Core\Resources\{{ modelNamePlural }}\v1\Services\ActionForMultipleRecordsService;
use App\Core\Resources\{{ modelNamePlural }}\v1\Services\Actions{{ modelNamePlural }}Records;
//use App\Imports\Api\{{ modelNamePlural }}\v1\{{ modelNamePlural }}Import;
use App\Exports\Api\{{ modelNamePlural }}\v1\{{ modelNamePlural }}Export;


class {{ class }} implements {{ interfaceName }}
{
    protected {{ modelName }} $model;

    public function __construct({{ modelName }} ${{ modelVariable }} ){
        $this->model = ${{ modelVariable }};
    }

    public function index(){
        return $this->model->applyFilters()->applySorts()->applyIncludes()->jsonPaginate();
    }

    public function create( $request ): \App\Models\{{ modelName }}{
        try {

            DB::beginTransaction();
                ${{ modelVariable }}Created = $this->model->query()->create([
                    '' => '',
                ]);
            DB::commit();

            return $this->model->applyIncludes()->find(${{ modelVariable }}Created->id);

        } catch (\Exception $e) {
            DB::rollback();
            abort(500,$e->getMessage());
        }

    }

    public function read( ${{ modelVariable }} ): \App\Models\{{ modelName }}{
        return $this->model->applyIncludes()->find(${{ modelVariable }}->getRouteKey());
    }

    public function update( $request, ${{ modelVariable }} ): \App\Models\{{ modelName }}{
        try {

            DB::beginTransaction();
                ${{ modelVariable }}->name = $request->get('name');
                ${{ modelVariable }}->save();
            DB::commit();

            return $this->model->applyIncludes()->find(${{ modelVariable }}->getRouteKey());

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function delete( ${{ modelVariable }} ): void{
        try {

            DB::beginTransaction();
                //${{ modelVariable }}->delete();
                Actions{{ modelName }}sRecords::deleteRecord( ${{ modelVariable }} );
            DB::commit();

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function action_for_multiple_records( $request ): array{
        try {

            DB::beginTransaction();

                $information = ActionForMultipleRecordsService::actionForMultipleRecords($request->get('action'), $request->get('{{ modelVariable }}s'));

            DB::commit();

            if (count($information) === 0) {
                $information[] = "No hay registros afectados";
            }

            return $information;

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function export_records( $request ): \Symfony\Component\HttpFoundation\BinaryFileResponse{
        if ($request->get('type') === 'pdf') {
            $domPDF = App::make('dompdf.wrapper');
            ${{ modelVariablePlural }} = $this->model->query()->whereIn('id', $request->get('{{ modelVariablePlural }}'))->get();
            $domPDF->loadView('resources.export.templates.pdf.{{ modelVariablePlural }}', compact('{{ modelVariablePlural }}'))->setPaper('a4', 'landscape')->setWarnings(false);
            return $domPDF->download('report-{{ modelVariablePlural }}.pdf');
        }
        return Excel::download(new {{ modelNamePlural }}Export($request->get('{{ modelVariablePlural }}')), '{{ modelVariablePlural }}.'. $request->get('type'));
    }

    public function import_records( $request ): void{
        //Proceso de importacion con Queues - El archivo debe tener
        //(new {{ modelNamePlural }}Import(Auth::user()))->import($request->file('{{ modelVariablePlural }}'));
    }

}
