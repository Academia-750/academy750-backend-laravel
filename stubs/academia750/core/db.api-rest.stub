<?php
namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedInterface }};
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\Api\{{ modelNamePlural }}\v1\{{ modelNamePlural }}Import;
use App\Exports\Api\{{ modelNamePlural }}\v1\{{ modelNamePlural }}Export;


class {{ class }} implements {{ interfaceName }}
{
    protected $model;

    public function __construct({{ modelName }} ${{ modelVariable }} ){
        $this->model = ${{ modelVariable }};
    }

    public function index(): \Illuminate\Pagination\LengthAwarePaginator{
        return $this->model->applyFilters()->applySorts()->applyIncludes()->jsonPaginate();
    }

    public function create( $request ): \App\Models\{{ modelName }}{
        try {

            DB::beginTransaction();
                ${{ modelVariable }}Created = $this->model->query()->create([
                    '' => '',
                ]);
            DB::commit();

            return $this->model->applyIncludes()->find(${{ modelVariable }}Created->id);

        } catch (\Exception $e) {
            DB::rollback();
            abort(500,$e->getMessage());
        }

    }

    public function read( ${{ modelVariable }} ): \App\Models\{{ modelName }}{
        return $this->model->applyIncludes()->find(${{ modelVariable }}->getRouteKey());
    }

    public function update( $request, ${{ modelVariable }} ): \App\Models\{{ modelName }}{
        try {

            DB::beginTransaction();
                ${{ modelVariable }}->name = $request->get('name');
                ${{ modelVariable }}->save();
            DB::commit();

            return $this->model->applyIncludes()->find(${{ modelVariable }}->getRouteKey());

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function delete( ${{ modelVariable }} ): void{
        try {

            DB::beginTransaction();
                ${{ modelVariable }}->delete();
            DB::commit();

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function mass_selection_for_action( $request ): string{
        try {

            DB::beginTransaction();
                $message = null;
                if( $request->get('action') === 'delete' ){
                    foreach ($request->get('{{ modelVariablePlural }}') as ${{ modelVariable }}){
                        ${{ modelVariable }}Delete = $this->model->firstWhere('id',${{ modelVariable }});
                        ${{ modelVariable }}Delete->delete();
                    }
                    $process = true;
                    $message = "Los registros seleccionados han sido eliminados.";
                }
            DB::commit();

            if ($process) {
                return $message;
            }else {
                return "No se ha realizado ninguna acción";
            }

        } catch (\Exception $e) {
            DB::rollback();
            abort(500, $e->getMessage());
        }

    }

    public function export_records( $request ): \Symfony\Component\HttpFoundation\BinaryFileResponse{
        if ($request->get('type') === 'pdf') {
            $domPDF = App::make('dompdf.wrapper');
            ${{ modelVariablePlural }} = $this->model->query()->whereIn('id', $request->get('{{ modelVariablePlural }}'))->get();
            $domPDF->loadView('resources.pdf.datatables-info.{{ modelVariablePlural }}', compact('{{ modelVariablePlural }}'))->setPaper('a4', 'landscape')->setWarnings(false);
            return $domPDF->download('report-{{ modelVariablePlural }}.pdf');
        }
        return Excel::download(new {{ modelNamePlural }}Export($request->get('{{ modelVariablePlural }}')), '{{ modelVariablePlural }}.'. $request->get('type'));
    }

    public function import_records( $request ): string{
        //Proceso de importacion con Queues - El archivo debe tener
        (new {{ modelNamePlural }}Import(Auth::user()))->import($request->file('{{ modelVariablePlural }}'));

         /*
         // Lanzamiento de errores en caso de validacion sin uso de Queues
         if ($importInstance->failures()->isNotEmpty()) {
             throw ValidationException::withMessages([
                 'errors' => [
                     $importInstance->failures()
                 ]
             ]);
         }*/
        return "Proceso de importación iniciado";
    }

}
