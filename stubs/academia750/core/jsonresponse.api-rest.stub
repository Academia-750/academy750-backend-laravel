<?php
namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedInterface }};
use App\Http\Resources\Api\{{ modelVariableSingularForFiles }}\v1\{{ modelVariableSingularForFiles }}Collection;
use App\Http\Resources\Api\{{ modelVariableSingularForFiles }}\v1\{{ modelVariableSingularForFiles }}Resource;
use Illuminate\Support\Str;

class {{ class }} implements {{ interfaceName }}
{
    protected {{ namespacedEvent }} ${{ eventNameVariable }};

    public function __construct({{ namespacedEvent }} ${{ eventNameVariable }} ){
        $this->{{ eventNameVariable }} = ${{ eventNameVariable }};
    }

    public function index(): {{ modelVariableSingularForFiles }}Collection
    {
        return {{ modelVariableSingularForFiles }}Collection::make(
            $this->{{ eventNameVariable }}->index()
        );
    }

    public function create( $request ): \Illuminate\Http\JsonResponse
    {
        return {{ modelVariableSingularForFiles }}Resource::make($this->{{ eventNameVariable }}->create($request))
                    ->response()
                    ->setStatusCode(201);
    }

    public function read( ${{ modelVariable }} ): {{ modelVariableSingularForFiles }}Resource
    {
        return {{ modelVariableSingularForFiles }}Resource::make(
            $this->{{ eventNameVariable }}->read( ${{ modelVariable }} )
        );
    }

    public function update( $request, ${{ modelVariable }} ): {{ modelVariableSingularForFiles }}Resource
    {
        return {{ modelVariableSingularForFiles }}Resource::make(
            $this->{{ eventNameVariable }}->update( $request, ${{ modelVariable }} )
        );
    }

    public function delete( ${{ modelVariable }} ): \Illuminate\Http\JsonResponse
    {
        return response()->json($this->{{ eventNameVariable }}->delete( ${{ modelVariable }} ), 204);
    }

    public function action_for_multiple_records( $request ): \Illuminate\Http\JsonResponse
    {
        return response()->json([
            'information' => $this->{{ eventNameVariable }}->action_for_multiple_records( $request )
        ], 200);
    }

    public function export_records( $request ): \Illuminate\Http\JsonResponse
    {
        $this->{{ eventNameVariable }}->export_records( $request );

        return response()->json([
            'message' => "Proceso de exportación iniciada"
        ], 200);
    }

    public function import_records( $request ): \Illuminate\Http\JsonResponse
    {
        $this->{{ eventNameVariable }}->import_records( $request );
        return response()->json([
            'message' => "Proceso de importación iniciada"
        ], 200);
    }

}
